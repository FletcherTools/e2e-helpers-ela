{"mappings":"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","sources":["src/index.ts","src/ela.ts","src/helpers/index.ts","src/helpers/get-shortcut-by-event.ts"],"sourcesContent":["export { ELAComponent } from './ela';\r\n\r\n","import './ela.scss';\r\n\r\nimport * as $ from 'jquery';\r\nimport { getShortcutByEvent } from './helpers';\r\n\r\nconst HELPER_ACTIVE_CLASS = 'ela-active';\r\nconst TOOLTIP_INVERTED_CLASS = 'ela-inverted';\r\nconst UPDATE_SERVICE_ATTRS_INTERVAL = 3000;\r\n\r\nconst TEST_ID_ATTR = 'data-test-id';\r\nconst TEST_PARAMS_ATTR = 'data-test-params';\r\nconst PSEUDO_ID_ATTR = 'data-test-pseudo-id';\r\nconst PSEUDO_NAME_ATTR = 'data-test-pseudo-name';\r\n\r\ninterface ELAConfig {\r\n    customSelectorAttr: string;\r\n    pseudoSelectorMap: Record<string, string>\r\n}\r\n\r\nexport function ELAComponent(config: ELAConfig) {\r\n    const {pseudoSelectorMap} = config;\r\n    let attachInterval;\r\n\r\n    // @ts-ignore\r\n    window.$ = $;\r\n    document.addEventListener('keydown', onKeyDown);\r\n\r\n    return function destroy() {\r\n        onHelperToggle(false);\r\n        document.removeEventListener('keydown', onKeyDown);\r\n    }\r\n\r\n    ///\r\n\r\n    function onKeyDown(e: KeyboardEvent) {\r\n        const shortcut = getShortcutByEvent(e);\r\n\r\n        switch (shortcut) {\r\n            case 'ctrl+alt+t':\r\n                onHelperToggle();\r\n                break;\r\n            case 'ctrl+i':\r\n                onTooltipPositionToggle();\r\n                break;\r\n        }\r\n    }\r\n\r\n    function onHelperToggle(value = !document.body.classList.contains(HELPER_ACTIVE_CLASS)) {\r\n        if (value) {\r\n            document.body.classList.add(HELPER_ACTIVE_CLASS);\r\n            document.addEventListener('click', onGlobalClick);\r\n            attachInterval = setInterval(attachServiceAttrs, UPDATE_SERVICE_ATTRS_INTERVAL);\r\n            attachServiceAttrs();\r\n        } else {\r\n            document.body.classList.remove(HELPER_ACTIVE_CLASS);\r\n            document.removeEventListener('click', onGlobalClick);\r\n            clearInterval(attachInterval);\r\n        }\r\n    }\r\n\r\n    function onTooltipPositionToggle() {\r\n        document.body.classList.toggle(TOOLTIP_INVERTED_CLASS);\r\n    }\r\n\r\n    function onGlobalClick(event) {\r\n        const targetEl = event.target;\r\n        if (targetEl?.hasAttribute(TEST_ID_ATTR) || targetEl?.hasAttribute(PSEUDO_ID_ATTR)) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n\r\n            if (event.ctrlKey) { // copy full pseudo-path if ctrl is pressed\r\n                const isPseudo = targetEl.hasAttribute(PSEUDO_ID_ATTR);\r\n                const parents = $(targetEl).parents()\r\n                    .filter((i, parentEl) => (\r\n                        parentEl.hasAttribute(TEST_ID_ATTR) ||\r\n                        isPseudo && parentEl.hasAttribute(PSEUDO_ID_ATTR)\r\n                    ))\r\n                    .toArray();\r\n\r\n                const pseudoQuery = [...parents.reverse(), targetEl]\r\n                    .map(el => extractPseudoSelector(el))\r\n                    .join(' ');\r\n\r\n                copyToClipboard(pseudoQuery);\r\n            } else {\r\n                const pseudoSelector = extractPseudoSelector(targetEl);\r\n                copyToClipboard(pseudoSelector);\r\n            }\r\n        }\r\n    }\r\n\r\n    ///\r\n\r\n    function attachServiceAttrs() {\r\n        attachPseudoAttrs();\r\n        attachParamsAttrs();\r\n    }\r\n\r\n    function attachPseudoAttrs() {\r\n        for (let pseudoSelector in pseudoSelectorMap) {\r\n            const rawSelector = pseudoSelectorMap[pseudoSelector];\r\n            const selector = rawSelector.replace(/=?\\$name/gi, '');\r\n            const pseudoId = pseudoSelector.replace(/=\\$name/gi, '');\r\n\r\n            $(selector).each((index, el) => {\r\n                el.setAttribute(PSEUDO_ID_ATTR, pseudoId);\r\n                if (rawSelector.includes('$name') && !el.hasAttribute(PSEUDO_NAME_ATTR)) {\r\n                    setPseudoNameAttr(el, selector);\r\n                }\r\n                if (!el.hasAttribute(TEST_PARAMS_ATTR)) {\r\n                    setTestParamsAttr(el);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    function attachParamsAttrs(): void {\r\n        const elements = $(`[${TEST_ID_ATTR}]`).toArray();\r\n        for (let el of elements) {\r\n            if (el.hasAttribute(TEST_PARAMS_ATTR)) continue;\r\n            setTestParamsAttr(el);\r\n        }\r\n    }\r\n\r\n    function setPseudoNameAttr(el: HTMLElement, selector: string): void {\r\n        switch (true) {\r\n            case selector.includes(':contains()'): {\r\n                const universalSelector = selector\r\n                    .replace(':contains()', '')\r\n                    .replace(':has', ' :is');\r\n\r\n                const [targetEl] = $(universalSelector).toArray();\r\n                const containedText = (targetEl ?? el).textContent.trim().replace(/\\s+/g, ' ');\r\n                const name = `\"${containedText}\"`;\r\n\r\n                el.setAttribute(PSEUDO_NAME_ATTR, name);\r\n                break;\r\n            }\r\n            case /\\[[a-z0-9_\\-]+\\]$/.test(selector): {\r\n                const [,nameAttr] = /\\[([a-z0-9_\\-]+)\\]$/.exec(selector)\r\n                const name = `\"${el.getAttribute(nameAttr)}\"`;\r\n                el.setAttribute(PSEUDO_NAME_ATTR, name);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function setTestParamsAttr(el: HTMLElement): void {\r\n        const paramsList = el.getAttributeNames()\r\n            .map(attrName => /^data-test-(?<paramName>.+)-spec$/.exec(attrName))\r\n            .filter(Boolean)\r\n            .map((match) => `${match.groups.paramName}=${el.getAttribute(match.input)}`);\r\n\r\n        if (paramsList.length) {\r\n            el.setAttribute(TEST_PARAMS_ATTR, `%(${paramsList.join(',')})`);\r\n        }\r\n    }\r\n\r\n    function extractPseudoSelector(el: HTMLElement): string {\r\n        const {content} = window.getComputedStyle(el, '::before');\r\n        return content.slice(1, -1).replace(/\\\\/g, '');\r\n    }\r\n\r\n    function copyToClipboard(text: string): void {\r\n        navigator.clipboard?.writeText(text);\r\n    }\r\n}","export * from './get-shortcut-by-event';","const keysMap = {\r\n    ctrlKey: 'ctrl',\r\n    shiftKey: 'shift',\r\n    altKey: 'alt'\r\n};\r\n\r\nexport function getShortcutByEvent(e: KeyboardEvent): string {\r\n    const key = e.keyCode > 18 ? e.code.replace(/^Key/, '') : '';\r\n    const specialPart = Object.entries(keysMap)\r\n        .reduce((result, [key, name]) =>\r\n            e[key] ? result.concat(name) : result,\r\n            []\r\n        )\r\n\r\n    return [...specialPart, key].filter(Boolean)\r\n        .join('+')\r\n        .toLowerCase();\r\n}"],"names":[],"version":3,"file":"main.js.map"}